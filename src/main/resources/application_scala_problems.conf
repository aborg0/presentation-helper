repository = "."
style = light
known-branches = [
    { name = empty_2.13, state.type = hidden},
    { name = masterx, description = "Free monads and tagless final comparison"},
    { name = adt,
        display-name = Algebraic data types
        description = "Sum (coproduct) types: Either, Option, sealed hierarchies\nnumber possible values: sum of possible values of alternatives, for example Option[Boolean]: 2+1\nProduct types: tuples, case classes\nnumber of possible values: product of possible values, for example (Boolean, Option[Unit]): 2*2\nfunction types: A=>B, number of possible values: |B|^|A|, for example Boolean=>Option[Boolean]: 3^2=9, Option[Boolean]=>Boolean: 2^3=8"
    },
    { name = breakable_return,
        display-name = "continue, break, return"
        description = "continue, break within breakable throw scala.util.control.ControlThrowables, just like return.\nThis can cause type inference problems, but also unexpected behaviour when wokring with Java"
    },
    { name = defer_non-determinism,
        display-name = "defer non- determinism"
        description = "Avoid creating non-deterministic functions, for example use traits that can be used for deterministic testing, pass that as argument"
    },
    { name = describe_do_not_do,
        display-name = "Describe, don't do"
        description = "Description of the computation can be more easily tested, the it allows different interpretations too"
    },
    { name = enumeration,
        display-name = "Enumeration"
        description = "Avoid scala.Enumeration if possible use sealed hierarchies instead"
    },
    { name = equality_2.13,
        display-name = "Equality"
        description = "Sometimes the covariant data types do not allow full type safety (with type inference).\n\nWatch out for contains, == in code reviews"
    },
    { name = existential_type_inference,
        display-name = "existential type inference"
        description = "Declaration-site variance annotations are well supported by type inference, but usage-site variance has some deficiencies.\n\nIn case you see strange errors with Mockito or other Java libraries, try adding type annotations."
    },
    { name = final_or_abstract,
        display-name = "methods should be final or abstract"
        description = "Declaration-site variance annotations are well supported by type inference, but usage-site variance has some deficiencies.\n\nIn case you see strange errors with Mockito or other Java libraries, try adding type annotations."
    },
    { name = folds,
        display-name = "use folds"
        description = "Folds on Option/Either/... can help covering all possible cases and create functional, dense code, It is better discuss with the team whether they can read it easily.\ne careful with Option fold's inferred type!"
    },
    { name = immutable_list_2.13,
        display-name = "immutable List, visibility"
        description = "final case class :: [+A](override val head: A, private[scala] var next: List[A @uncheckedVariance]) // sound because `next` is used only locally\n\nWell, java can still access it"
    },
    { name = implicit_names_unique,
        display-name = "implicit names should be unique"
        description = "Implicit defs with the same name (even if they provide different types) will cause implicit not found errors, so you should use unique names"
    },
    { name = inaccessible_value,
        display-name = "NaNs"
        description = "NaNs behave differently (than Java collections) in Scala collections as they check equality first before calling equals"
    },
    { name = monads_do_not_compose_2.13,
        display-name = "monads do not compose"
        description = "Not all monads can be composed, but transformers can help; sometimes converting the other is the easiest solution"
    },
    { name = partial_functions_are_functions,
        display-name = "partial functions are functions"
        description = "These cause unsound behaviour, violates Liskov substitution principle"
    },
    { name = rewrite_2.13,
        display-name = "rewrite"
        description = "Sometimes code reviews request mutable state rewrite, there are multiple options:\n - recursion - careful with stackoverflows (prefer tail recursion, or check trampolining)\n - foldLeft is quite general, from an initial state, you can create new states\n - often little changes are enough to avoid mutable collections\n - State monads might also help"
    },
    { name = smart_constructors,
        display-name = "smart constructors"
        description = "They can be used to avoid same types multiple times in the same scope, and also to validate the input"
    },
    { name = structural_types,
        display-name = "structural types"
        description = "Structural types in Scala often use reflection, which can cause performance issues, and the security manager can be configured to disallow it"
    },
    { name = type_bounds_for_variance,
        display-name = "type bounds for variance"
        description = "They usually does not help, just make the API more complex. Check the optics for a better solution."
    },
    { name = type_inference,
        display-name = "type inference"
        description = "Scala supports declaration site variance annotations, do not afraid to use them. Caveat: Java does not see those, so be careful when you design APIs to be consumed by non-Scala languages"
    },
    { name = typeclasses,
        display-name = "type-classes"
        description = "Type-classes allow extensibility, but be careful to keep their global coherence (there should be at most one typeclass instance for each type)\n\nType class:\nHas at least one abstract method, a type parameter"
    },
    { name = variance,
        display-name = "variance"
        description = "Scala supports declaration site variance annotations, do not afraid to use them. Caveat: Java does not see those, so be careful when you design APIs to be consumed by non-Scala languages"
    },
    { name = varargs,
        display-name = "varargs"
        description = "Special syntax for matching/referring to all elements: @_*, :_*"
    },
    { name = views,
        display-name = "views"
        description = "Before Scala 2.13, the views (~by-name evaluation; non-memoized lazy computation) shared the same interfaces as the eager ones. This could cause unexpected behaviour, performance problems."
    },
]