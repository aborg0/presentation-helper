repository = "."
style = light
known-branches = [
    { name = empty_2.13, state.type = hidden},
    { name = masterx, description = "Free monads and tagless final comparison"},
    { name = adt,
        display-name = Algebraic data types
        description = "Sum (coproduct) types: Either, Option, sealed hierarchies\nnumber possible values: sum of possible values of alternatives, for example Option[Boolean]: 2+1\nProduct types: tuples, case classes\nnumber of possible values: product of possible values, for example (Boolean, Option[Unit]): 2*2\nfunction types: A=>B, number of possible values: |B|^|A|, for example Boolean=>Option[Boolean]: 3^2=9, Option[Boolean]=>Boolean: 2^3=8"
    },
    { name = breakable_return,
        display-name = "continue, break, return"
        description = "continue, break within breakable throw scala.util.control.ControlThrowables, just like return.\nThis can cause type inference problems, but also unexpected behaviour when wokring with Java"
    },
    { name = defer_non-determinism,
        display-name = "defer non- determinism"
        description = "Avoid creating non-deterministic functions, for example use traits that can be used for deterministic testing, pass that as argument"
    },
    { name = describe_do_not_do,
        display-name = "Describe, don't do"
        description = "Description of the computation can be more easily tested, the it allows different interpretations too"
    },
    { name = enumeration,
        display-name = "Enumeration"
        description = "Avoid scala.Enumeration if possible use sealed hierarchies instead"
    },
    { name = equality_2.13,
        display-name = "Equality"
        description = "Sometimes the covariant data types do not allow full type safety (with type inference).\n\nWatch out for contains, == in code reviews"
    },
    { name = existential_type_inference,
        display-name = "existential type inference"
        description = "Declaration-site variance annotations are well supported by type inference, but usage-site variance has some deficiencies.\n\nIn case you see strange errors with Mockito or other Java libraries, try adding type annotations."
    },
    { name = final_or_abstract,
        display-name = "methods should be final or abstract"
        description = "Declaration-site variance annotations are well supported by type inference, but usage-site variance has some deficiencies.\n\nIn case you see strange errors with Mockito or other Java libraries, try adding type annotations."
    },
    { name = folds,
        display-name = "use folds"
        description = "Folds on Option/Either/... can help covering all possible cases, but be careful with Option fold's inferred type!"
    },
    { name = immutable_list_2.13,
        display-name = "immutable List, visibility"
        description = "final case class :: [+A](override val head: A, private[scala] var next: List[A @uncheckedVariance]) // sound because `next` is used only locally\n\nWell, java can still access it"
    },
    { name = implicit_names_unique,
        display-name = "implicit names should be unique"
        description = "Implicit defs with the same name (even if they provide different types) will cause implicit not found errors, so you should use unique names"
    },
]